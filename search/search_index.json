{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Zabbix/Partitioning/","text":"Partitioning with external script for mysql/mariadb database Preparation If your database stored in one file (example /var/lib/mysql/ibdata), you need activate innodb_file_per_table option in mysql config. Algorithm : Stop services, that uses database; Backup database; Delete database; Stop mysql server; In file /etc/mysql/my.cnf delete option innodb_data_file_path and add innodb_file_per_table; Delete all files like /var/lib/mysql/ibdata, /var/lib/mysql/ib_logfile0, /var/lib/mysql/ib_logfile1; Start mysql server; Create database; Restore data from backup; Now we must see files with extension .ibd for every table Start services. We need to split these tables in zabbix database: history,history_uint,history_str,history_text,history_log,trends,trends_uint Disable housekeeping in web for history and trends Administration -> General -> Housekeeping. If we want disable housekeeping for all tables, change HousekeepingFrequency to 0 in /etc/zabbix/zabbix_server.conf . SHOW ENGINES; | INSTALL SONAME 'ha_blackhole'; or INSTALL PLUGIN ALTER TABLE housekeeper ENGINE = BLACKHOLE; SHOW GLOBAL VARIABLES LIKE 'event_scheduler'; SET GLOBAL event_scheduler = ON; You should also put a line in the 'my.cnf' file like \"event_scheduler=ON\" in case of reboot. Now it's time to start partition for each table. As partitioning is usually performed for a database with existing historical data - for every table you must specify partitions starting from a minimum value of the clock field and up to the current moment (day, month) of tables to be partitioned. The minimum value of the clock in a table can be found out by a query like this: SELECT FROM_UNIXTIME(MIN(clock)) FROM history_uint ; Example of commands for manual init/add/delete partition, just in case: ALTER TABLE `history` PARTITION BY RANGE (clock) (PARTITION p2011_11_24 VALUES LESS THAN (UNIX_TIMESTAMP(\"2011-11-25 00:00:00\"))); ALTER TABLE `history` ADD PARTITION p2011_10_23 VALUES LESS THAN (UNIX_TIMESTAMP(\"2011-10-24 00:00:00\")) ENGINE = InnoDB; ALTER TABLE `history` DROP PARTITION p2011_06; summary ALTER TABLE `trends` PARTITION BY RANGE( clock ) ( PARTITION p2019_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-09-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-10-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-01-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-02-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-03-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-04-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-05-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-06-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-07-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-08-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-09-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-10-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-11-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2021-01-01 00:00:00\")) ENGINE = InnoDB); ALTER TABLE `trends_uint` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_uint` PARTITION BY RANGE( clock ) ( PARTITION p2019_10_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-20 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_20 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-21 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_21 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-22 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_22 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-23 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_23 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-24 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_24 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-25 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_25 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-26 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_26 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-27 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_27 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-28 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_28 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-29 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_29 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-30 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_30 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-02 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-03 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-04 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-05 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-06 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-07 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-08 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-09 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-10 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-11 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-12 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-13 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_13 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-14 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_14 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-15 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_15 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-16 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_16 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-17 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_17 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-18 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_18 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-19 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-20 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_20 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-21 00:00:00\")) ENGINE = InnoDB); ALTER TABLE `history_log` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_text` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_str` PARTITION BY RANGE( clock ) ( -//- How to use script yum install -y perl-Sys-Syslog yum install -y perl-DateTime-TimeZone chmod +x /etc/cron.daily/zabbix-partition /etc/cron.daily/zabbix-partition In code u must choose period of history and version of mysql. Expand script code #!/usr/bin/perl use strict; use Data::Dumper; use DBI; use Sys::Syslog qw(:standard :macros); use DateTime; use POSIX qw(strftime); openlog(\"mysql_zbx_part\", \"ndelay,pid\", LOG_LOCAL0); my $db_schema = 'zabbixdb'; my $dsn = 'DBI:mysql:'.$db_schema.':mysql_socket=/var/lib/mysql/mysql.sock'; my $db_user_name = 'root'; my $db_password = 'Nxtt2019'; my $tables = { 'history' => { 'period' => 'day', 'keep_history' => '30'}, 'history_log' => { 'period' => 'day', 'keep_history' => '30'}, 'history_str' => { 'period' => 'day', 'keep_history' => '30'}, 'history_text' => { 'period' => 'day', 'keep_history' => '30'}, 'history_uint' => { 'period' => 'day', 'keep_history' => '15'}, 'trends' => { 'period' => 'month', 'keep_history' => '12'}, 'trends_uint' => { 'period' => 'month', 'keep_history' => '12'}, # comment next 5 lines if you partition zabbix database starting from 2.2 # they usually used for zabbix database before 2.2 # 'acknowledges' => { 'period' => 'month', 'keep_history' => '23'}, # 'alerts' => { 'period' => 'month', 'keep_history' => '6'}, # 'auditlog' => { 'period' => 'month', 'keep_history' => '24'}, # 'events' => { 'period' => 'month', 'keep_history' => '12'}, # 'service_alarms' => { 'period' => 'month', 'keep_history' => '6'}, }; my $amount_partitions = 10; my $curr_tz = 'Europe/Moscow'; my $part_tables; my $dbh = DBI->connect($dsn, $db_user_name, $db_password, {'ShowErrorStatement' => 1}); unless ( check_have_partition() ) { print \"Your installation of MySQL does not support table partitioning.\\n\"; syslog(LOG_CRIT, 'Your installation of MySQL does not support table partitioning.'); exit 1; } my $sth = $dbh->prepare(qq{SELECT table_name, partition_name, lower(partition_method) as partition_method, rtrim(ltrim(partition_expression)) as partition_expression, partition_description, table_rows FROM information_schema.partitions WHERE partition_name IS NOT NULL AND table_schema = ?}); $sth->execute($db_schema); while (my $row = $sth->fetchrow_hashref()) { $part_tables->{$row->{'table_name'}}->{$row->{'partition_name'}} = $row; } $sth->finish(); foreach my $key (sort keys %{$tables}) { unless (defined($part_tables->{$key})) { syslog(LOG_ERR, 'Partitioning for \"'.$key.'\" is not found! The table might be not partitioned.'); next; } create_next_partition($key, $part_tables->{$key}, $tables->{$key}->{'period'}); remove_old_partitions($key, $part_tables->{$key}, $tables->{$key}->{'period'}, $tables->{$key}->{'keep_history'}) } delete_old_data(); $dbh->disconnect(); sub check_have_partition { my $result = 0; # MySQL 5.5 my $sth = $dbh->prepare(qq{SELECT variable_value FROM information_schema.global_variables WHERE variable_name = 'have_partitioning'}); # MySQL 5.6 #my $sth = $dbh->prepare(qq{SELECT plugin_status FROM information_schema.plugins WHERE plugin_name = 'partition'}); $sth->execute(); my $row = $sth->fetchrow_array(); $sth->finish(); # MySQL 5.5 return 1 if $row eq 'YES'; # MySQL 5.6 #return 1 if $row eq 'ACTIVE'; } sub create_next_partition { my $table_name = shift; my $table_part = shift; my $period = shift; for (my $curr_part = 0; $curr_part < $amount_partitions; $curr_part++) { my $next_name = name_next_part($tables->{$table_name}->{'period'}, $curr_part); my $found = 0; foreach my $partition (sort keys %{$table_part}) { if ($next_name eq $partition) { syslog(LOG_INFO, \"Next partition for $table_name table has already been created. It is $next_name\"); $found = 1; } } if ( $found == 0 ) { syslog(LOG_INFO, \"Creating a partition for $table_name table ($next_name)\"); my $query = 'ALTER TABLE '.\"$db_schema.$table_name\".' ADD PARTITION (PARTITION '.$next_name. ' VALUES less than (UNIX_TIMESTAMP(\"'.date_next_part($tables->{$table_name}->{'period'}, $curr_part).'\") div 1))'; syslog(LOG_DEBUG, $query); $dbh->do($query); } } } sub remove_old_partitions { my $table_name = shift; my $table_part = shift; my $period = shift; my $keep_history = shift; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { $curr_date->add(days => -$keep_history); $curr_date->add(hours => -$curr_date->strftime('%H')); $curr_date->add(minutes => -$curr_date->strftime('%M')); $curr_date->add(seconds => -$curr_date->strftime('%S')); } elsif ( $period eq 'week' ) { } elsif ( $period eq 'month' ) { $curr_date->add(months => -$keep_history); $curr_date->add(days => -$curr_date->strftime('%d')+1); $curr_date->add(hours => -$curr_date->strftime('%H')); $curr_date->add(minutes => -$curr_date->strftime('%M')); $curr_date->add(seconds => -$curr_date->strftime('%S')); } foreach my $partition (sort keys %{$table_part}) { if ($table_part->{$partition}->{'partition_description'} < = $curr_date->epoch) { syslog(LOG_INFO, \"Removing old $partition partition from $table_name table\"); my $query = \"ALTER TABLE $db_schema.$table_name DROP PARTITION $partition\"; syslog(LOG_DEBUG, $query); $dbh->do($query); } } } sub name_next_part { my $period = shift; my $curr_part = shift; my $name_template; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { my $curr_date = $curr_date->truncate( to => 'day' ); $curr_date->add(days => 1 + $curr_part); $name_template = $curr_date->strftime('p%Y_%m_%d'); } elsif ($period eq 'week') { my $curr_date = $curr_date->truncate( to => 'week' ); $curr_date->add(days => 7 * $curr_part); $name_template = $curr_date->strftime('p%Y_%m_w%W'); } elsif ($period eq 'month') { my $curr_date = $curr_date->truncate( to => 'month' ); $curr_date->add(months => 1 + $curr_part); $name_template = $curr_date->strftime('p%Y_%m'); } return $name_template; } sub date_next_part { my $period = shift; my $curr_part = shift; my $period_date; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { my $curr_date = $curr_date->truncate( to => 'day' ); $curr_date->add(days => 2 + $curr_part); $period_date = $curr_date->strftime('%Y-%m-%d'); } elsif ($period eq 'week') { my $curr_date = $curr_date->truncate( to => 'week' ); $curr_date->add(days => 7 * $curr_part + 1); $period_date = $curr_date->strftime('%Y-%m-%d'); } elsif ($period eq 'month') { my $curr_date = $curr_date->truncate( to => 'month' ); $curr_date->add(months => 2 + $curr_part); $period_date = $curr_date->strftime('%Y-%m-%d'); } return $period_date; } sub delete_old_data { $dbh->do(\"DELETE FROM sessions WHERE lastaccess < UNIX_TIMESTAMP(NOW() - INTERVAL 1 MONTH)\"); $dbh->do(\"TRUNCATE housekeeper\"); $dbh->do(\"DELETE FROM auditlog_details WHERE NOT EXISTS (SELECT NULL FROM auditlog WHERE auditlog.auditid = auditlog_details.auditid)\"); }","title":"Partitioning with external script for mysql/mariadb database"},{"location":"Zabbix/Partitioning/#partitioning-with-external-script-for-mysqlmariadb-database","text":"","title":"Partitioning with external script for mysql/mariadb database"},{"location":"Zabbix/Partitioning/#preparation","text":"If your database stored in one file (example /var/lib/mysql/ibdata), you need activate innodb_file_per_table option in mysql config. Algorithm : Stop services, that uses database; Backup database; Delete database; Stop mysql server; In file /etc/mysql/my.cnf delete option innodb_data_file_path and add innodb_file_per_table; Delete all files like /var/lib/mysql/ibdata, /var/lib/mysql/ib_logfile0, /var/lib/mysql/ib_logfile1; Start mysql server; Create database; Restore data from backup; Now we must see files with extension .ibd for every table Start services. We need to split these tables in zabbix database: history,history_uint,history_str,history_text,history_log,trends,trends_uint Disable housekeeping in web for history and trends Administration -> General -> Housekeeping. If we want disable housekeeping for all tables, change HousekeepingFrequency to 0 in /etc/zabbix/zabbix_server.conf . SHOW ENGINES; | INSTALL SONAME 'ha_blackhole'; or INSTALL PLUGIN ALTER TABLE housekeeper ENGINE = BLACKHOLE; SHOW GLOBAL VARIABLES LIKE 'event_scheduler'; SET GLOBAL event_scheduler = ON; You should also put a line in the 'my.cnf' file like \"event_scheduler=ON\" in case of reboot. Now it's time to start partition for each table. As partitioning is usually performed for a database with existing historical data - for every table you must specify partitions starting from a minimum value of the clock field and up to the current moment (day, month) of tables to be partitioned. The minimum value of the clock in a table can be found out by a query like this: SELECT FROM_UNIXTIME(MIN(clock)) FROM history_uint ; Example of commands for manual init/add/delete partition, just in case: ALTER TABLE `history` PARTITION BY RANGE (clock) (PARTITION p2011_11_24 VALUES LESS THAN (UNIX_TIMESTAMP(\"2011-11-25 00:00:00\"))); ALTER TABLE `history` ADD PARTITION p2011_10_23 VALUES LESS THAN (UNIX_TIMESTAMP(\"2011-10-24 00:00:00\")) ENGINE = InnoDB; ALTER TABLE `history` DROP PARTITION p2011_06; summary ALTER TABLE `trends` PARTITION BY RANGE( clock ) ( PARTITION p2019_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-09-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-10-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-01-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-02-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-03-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-04-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-05-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-06-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-07-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-08-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-09-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-10-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-11-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2020-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2020_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2021-01-01 00:00:00\")) ENGINE = InnoDB); ALTER TABLE `trends_uint` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_uint` PARTITION BY RANGE( clock ) ( PARTITION p2019_10_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-20 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_20 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-21 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_21 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-22 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_22 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-23 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_23 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-24 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_24 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-25 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_25 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-26 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_26 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-27 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_27 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-28 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_28 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-29 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_29 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-11-30 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_11_30 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-01 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-02 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-03 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-04 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-05 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-06 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-07 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-08 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-09 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-10 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-11 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-12 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-13 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_13 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-14 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_14 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-15 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_15 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-16 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_16 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-17 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_17 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-18 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_18 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-19 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_19 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-20 00:00:00\")) ENGINE = InnoDB, PARTITION p2019_12_20 VALUES LESS THAN (UNIX_TIMESTAMP(\"2019-12-21 00:00:00\")) ENGINE = InnoDB); ALTER TABLE `history_log` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_text` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history` PARTITION BY RANGE( clock ) ( -//- ALTER TABLE `history_str` PARTITION BY RANGE( clock ) ( -//-","title":"Preparation"},{"location":"Zabbix/Partitioning/#how-to-use-script","text":"yum install -y perl-Sys-Syslog yum install -y perl-DateTime-TimeZone chmod +x /etc/cron.daily/zabbix-partition /etc/cron.daily/zabbix-partition In code u must choose period of history and version of mysql. Expand script code #!/usr/bin/perl use strict; use Data::Dumper; use DBI; use Sys::Syslog qw(:standard :macros); use DateTime; use POSIX qw(strftime); openlog(\"mysql_zbx_part\", \"ndelay,pid\", LOG_LOCAL0); my $db_schema = 'zabbixdb'; my $dsn = 'DBI:mysql:'.$db_schema.':mysql_socket=/var/lib/mysql/mysql.sock'; my $db_user_name = 'root'; my $db_password = 'Nxtt2019'; my $tables = { 'history' => { 'period' => 'day', 'keep_history' => '30'}, 'history_log' => { 'period' => 'day', 'keep_history' => '30'}, 'history_str' => { 'period' => 'day', 'keep_history' => '30'}, 'history_text' => { 'period' => 'day', 'keep_history' => '30'}, 'history_uint' => { 'period' => 'day', 'keep_history' => '15'}, 'trends' => { 'period' => 'month', 'keep_history' => '12'}, 'trends_uint' => { 'period' => 'month', 'keep_history' => '12'}, # comment next 5 lines if you partition zabbix database starting from 2.2 # they usually used for zabbix database before 2.2 # 'acknowledges' => { 'period' => 'month', 'keep_history' => '23'}, # 'alerts' => { 'period' => 'month', 'keep_history' => '6'}, # 'auditlog' => { 'period' => 'month', 'keep_history' => '24'}, # 'events' => { 'period' => 'month', 'keep_history' => '12'}, # 'service_alarms' => { 'period' => 'month', 'keep_history' => '6'}, }; my $amount_partitions = 10; my $curr_tz = 'Europe/Moscow'; my $part_tables; my $dbh = DBI->connect($dsn, $db_user_name, $db_password, {'ShowErrorStatement' => 1}); unless ( check_have_partition() ) { print \"Your installation of MySQL does not support table partitioning.\\n\"; syslog(LOG_CRIT, 'Your installation of MySQL does not support table partitioning.'); exit 1; } my $sth = $dbh->prepare(qq{SELECT table_name, partition_name, lower(partition_method) as partition_method, rtrim(ltrim(partition_expression)) as partition_expression, partition_description, table_rows FROM information_schema.partitions WHERE partition_name IS NOT NULL AND table_schema = ?}); $sth->execute($db_schema); while (my $row = $sth->fetchrow_hashref()) { $part_tables->{$row->{'table_name'}}->{$row->{'partition_name'}} = $row; } $sth->finish(); foreach my $key (sort keys %{$tables}) { unless (defined($part_tables->{$key})) { syslog(LOG_ERR, 'Partitioning for \"'.$key.'\" is not found! The table might be not partitioned.'); next; } create_next_partition($key, $part_tables->{$key}, $tables->{$key}->{'period'}); remove_old_partitions($key, $part_tables->{$key}, $tables->{$key}->{'period'}, $tables->{$key}->{'keep_history'}) } delete_old_data(); $dbh->disconnect(); sub check_have_partition { my $result = 0; # MySQL 5.5 my $sth = $dbh->prepare(qq{SELECT variable_value FROM information_schema.global_variables WHERE variable_name = 'have_partitioning'}); # MySQL 5.6 #my $sth = $dbh->prepare(qq{SELECT plugin_status FROM information_schema.plugins WHERE plugin_name = 'partition'}); $sth->execute(); my $row = $sth->fetchrow_array(); $sth->finish(); # MySQL 5.5 return 1 if $row eq 'YES'; # MySQL 5.6 #return 1 if $row eq 'ACTIVE'; } sub create_next_partition { my $table_name = shift; my $table_part = shift; my $period = shift; for (my $curr_part = 0; $curr_part < $amount_partitions; $curr_part++) { my $next_name = name_next_part($tables->{$table_name}->{'period'}, $curr_part); my $found = 0; foreach my $partition (sort keys %{$table_part}) { if ($next_name eq $partition) { syslog(LOG_INFO, \"Next partition for $table_name table has already been created. It is $next_name\"); $found = 1; } } if ( $found == 0 ) { syslog(LOG_INFO, \"Creating a partition for $table_name table ($next_name)\"); my $query = 'ALTER TABLE '.\"$db_schema.$table_name\".' ADD PARTITION (PARTITION '.$next_name. ' VALUES less than (UNIX_TIMESTAMP(\"'.date_next_part($tables->{$table_name}->{'period'}, $curr_part).'\") div 1))'; syslog(LOG_DEBUG, $query); $dbh->do($query); } } } sub remove_old_partitions { my $table_name = shift; my $table_part = shift; my $period = shift; my $keep_history = shift; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { $curr_date->add(days => -$keep_history); $curr_date->add(hours => -$curr_date->strftime('%H')); $curr_date->add(minutes => -$curr_date->strftime('%M')); $curr_date->add(seconds => -$curr_date->strftime('%S')); } elsif ( $period eq 'week' ) { } elsif ( $period eq 'month' ) { $curr_date->add(months => -$keep_history); $curr_date->add(days => -$curr_date->strftime('%d')+1); $curr_date->add(hours => -$curr_date->strftime('%H')); $curr_date->add(minutes => -$curr_date->strftime('%M')); $curr_date->add(seconds => -$curr_date->strftime('%S')); } foreach my $partition (sort keys %{$table_part}) { if ($table_part->{$partition}->{'partition_description'} < = $curr_date->epoch) { syslog(LOG_INFO, \"Removing old $partition partition from $table_name table\"); my $query = \"ALTER TABLE $db_schema.$table_name DROP PARTITION $partition\"; syslog(LOG_DEBUG, $query); $dbh->do($query); } } } sub name_next_part { my $period = shift; my $curr_part = shift; my $name_template; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { my $curr_date = $curr_date->truncate( to => 'day' ); $curr_date->add(days => 1 + $curr_part); $name_template = $curr_date->strftime('p%Y_%m_%d'); } elsif ($period eq 'week') { my $curr_date = $curr_date->truncate( to => 'week' ); $curr_date->add(days => 7 * $curr_part); $name_template = $curr_date->strftime('p%Y_%m_w%W'); } elsif ($period eq 'month') { my $curr_date = $curr_date->truncate( to => 'month' ); $curr_date->add(months => 1 + $curr_part); $name_template = $curr_date->strftime('p%Y_%m'); } return $name_template; } sub date_next_part { my $period = shift; my $curr_part = shift; my $period_date; my $curr_date = DateTime->now; $curr_date->set_time_zone( $curr_tz ); if ( $period eq 'day' ) { my $curr_date = $curr_date->truncate( to => 'day' ); $curr_date->add(days => 2 + $curr_part); $period_date = $curr_date->strftime('%Y-%m-%d'); } elsif ($period eq 'week') { my $curr_date = $curr_date->truncate( to => 'week' ); $curr_date->add(days => 7 * $curr_part + 1); $period_date = $curr_date->strftime('%Y-%m-%d'); } elsif ($period eq 'month') { my $curr_date = $curr_date->truncate( to => 'month' ); $curr_date->add(months => 2 + $curr_part); $period_date = $curr_date->strftime('%Y-%m-%d'); } return $period_date; } sub delete_old_data { $dbh->do(\"DELETE FROM sessions WHERE lastaccess < UNIX_TIMESTAMP(NOW() - INTERVAL 1 MONTH)\"); $dbh->do(\"TRUNCATE housekeeper\"); $dbh->do(\"DELETE FROM auditlog_details WHERE NOT EXISTS (SELECT NULL FROM auditlog WHERE auditlog.auditid = auditlog_details.auditid)\"); }","title":"How to use script"},{"location":"Zabbix/SSO/","text":"SSO in zabbix LDAP/LDAPS Let us configure LDAP authentication in Zabbix. In the Zabbix frontend, go to the LDAP settings tab in Administration -> Authentication. Check Enable LDAP authentication and fill in the following fields: LDAP host: ldap://dc1.domain.local Port: 389 Base DN: DC=domain, DC=local Search attribute: sAMAccountName Bind DN: CN=zabbix,OU=Users,DC=domain,DC=local If the test has been successful, save the settings, and change the authentication type in Zabbix from Internal to LDAP LDAP authentication is configured. If the LDAP server is unavailable, we will not be able to access Zabbix. after Enable HTTP authentication (HTTP Settings -> Enable HTTP authentication): To get back to the internal authentication, we open MySQL, and run the following command: update zabbix.config set authentication_type='0' where configid='1?; DC Create A record in dns and user in AD users, then: ktpass -princ HTTP/zabbix.domain.local@DOMAIN.LOCAL -mapuser zabbix@DOMAIN.LOCAL -crypto all -pass VeryStrongPASS!!! -ptype KRB5_NT_PRINCIPAL -out my.keytab Kerberos For Centos: yum install krb5-workstation krb5-libs krb5-auth-dialog mod_auth_kerb ntp ntpdate -y ntpdate DC1.domain.local vi /etc/krb5.conf Change next in /etc/krb5.conf: [realms] EXAMPLE.COM = { kdc = kerberos.example.com admin_server = kerberos.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Restart Apache to take effect specify the FQDN name of the server in /etc/hostname that must match the DNS record in the domain. cat /etc/hosts 127.0.0.1 zabbix.domain.local zabbix 'server ip' zabbix.domain.local zabbix After copy keytab file from DC, we need check permission for this. Command klist will show if the ticket was created. Create a Kerberos ticket for user OR easy to check if your krb5.conf is valid by doing kinit username@DOMAIN.COM , for our example kinit zabbix . Make sure the Kerberos authentication works on Linux: kinit -kV -p HTTP/zabbix.domain.local . Delete tickets - kdestroy -A . web Enable HTTP authentication in zabbix, and im not think that change default login form is good for all. So i want work with link /zabbix/index_http.php . For apache add next block in /etc/httpd/conf.d/zabbix.conf: <Location /zabbix/index_http.php> AuthType Kerberos AuthName \"Kerberos Authenticated\" KrbAuthRealms DOMAIN.LOCAL Krb5Keytab \"/etc/httpd/conf.d/zabbix.keytab\" KrbMethodNegotiate On KrbSaveCredentials On KrbVerifyKDC On KrbServiceName Any KrbLocalUserMapping On KrbMethodK5Passwd Off Require valid-user # LogLevel trace8 </Location> Browser For Internet Explorer to use Kerberos authentication on Zabbix, we will have to add its URL to Local Intranet sites. Google Chrome uses Internet Explorer settings, so we do not need to configure it separately. i. Open Options -> Security in the IE. ii. Click Sites in the Local intranet, check the options shown in the screenshot below, and click Advanced: iii. Later, enter the Zabbix server URL. iv. Then, go to the Advanced tab and check Enable Integrated Windows Authentication. v. Also, we can also put Zabbix URL to the Local Intranet zone using the Group Policies (Computer Configuration -> Administrative Templates -> Windows Components -> Internet Explorer -> Internet Control Panel -> Security Page -> Site to Zone Assignment List. Use zone code 1 for intranet sites). vi. Add the URL of the Zabbix server to the following parameters of about:config for Mozilla Firefox: network.automatic-ntlm-auth.trusted-uris network.negotiate-auth.delegation-uris network.negotiate-auth.trusted-uris debug Kerberos Authentication Debugging & Troubleshooting in Apache If we have any issues, enable debug mode in apache: Enter the following before the closing tag in /etc/apache2/sites-available/000-defaults.conf: LogLevel trace8 Then we restart apache and check the Kerberos module error in the error.log file. To make it more convenient, we use the command to filter the entries by the IP address: tailf /var/log/httpd/error_log | grep 'our ip' tail -f /var/log/apache2/error.log | grep 'Our IP address' Similarly, to work with and diagnose Kerberos, we can use kinit and klist commands. kinit is a tool to get and cache Kerberos tickets, for example: kinit -V -k -t /etc/apache2/zabbix.keytab -p HTTP/zabbix.domain.local@DOMAIN.LOCAL If we have generated our keytab file correctly, the command will run. As a result, we will get a message that the authentication has been successful. Using klist, we can view cached Kerberos tickets: klist -a Make sure that the SPN record for your Zabbix service account exists in AD. Enter the following command on the domain controller: setpn -l zabbix_admin It must be in HTTP/zabbix.domain.local format. If there is no entry, add it. setspn -a HTTP/zabbix.domain.local zabbix_admin If KrbServiceName does not match the name specified in the keyboard file, an error occurs. So you can set the desired value during the test. Once you have made sure that the system is working, enter a valid service name. You can check with: klist - the /etc/apache2/zabbix.keytab Notes A successful request should look like: Acquiring creds for HTTP/web01@DOMAIN.NET Verifying client data using KRB5 GSS-API Client didn't delegate us their credential GSS-API token of length XXX bytes will be sent back gss_accept_sec_context() failed: An unsupported mechanism was requested (, Unknown error) This usually means there's something wrong with the principal configuration. GSS-API major_status:000d0000, minor_status:025ea101 Could no find principal. Spelling error or wrong syntax ? GSS-API major_status:000d0000, minor_status:0000000d File permission errors (usually the keytab file). GSS-API major_status:000d0000, minor_status:000186a3 Wrong password in keytab or your ticket. kinit: Preauthentication failed while getting initial credentials Wrong password and/or credentials in general (check letter casing) kinit: KDC has no support for encryption type while getting initial credentials Encryption type is not supported by the AD server. Make sure not to use DES. Users not getting synced Make sure the users are as low in the hierarchy as possible or else they might not get caught. General authentication errors Make sure you're typing the login in correct case. They also have to match in the keytab file. Some links https://plugins.miniorange.com/guide-to-setup-kerberos-single-sign-sso https://www.drupal.org/project/ldap/issues/2123615 https://www.zabbix.com/documentation/current/manual/appendix/items/kerberos https://gist.github.com/andersevenrud/53920c3ef91c5e11c939fce5ca17af3b https://www.drupal.org/project/ldap/issues/2123615 https://jakondo.ru/integratsiya-zabbix-s-active-directory-nastrojka-prozrachnoj-autentifikatsii-sso-single-sign-on/ https://jakondo.ru/nastrojka-sso-single-sign-on-avtorizatsii-na-apache-v-active-directory-debian-8-jessie-ubuntu-server-14-04/ http://woshub.com/zabbix-single-sign-sso-authentication-ldap-active-directory/","title":"SSO in zabbix"},{"location":"Zabbix/SSO/#sso-in-zabbix","text":"","title":"SSO in zabbix"},{"location":"Zabbix/SSO/#ldapldaps","text":"Let us configure LDAP authentication in Zabbix. In the Zabbix frontend, go to the LDAP settings tab in Administration -> Authentication. Check Enable LDAP authentication and fill in the following fields: LDAP host: ldap://dc1.domain.local Port: 389 Base DN: DC=domain, DC=local Search attribute: sAMAccountName Bind DN: CN=zabbix,OU=Users,DC=domain,DC=local If the test has been successful, save the settings, and change the authentication type in Zabbix from Internal to LDAP LDAP authentication is configured. If the LDAP server is unavailable, we will not be able to access Zabbix. after Enable HTTP authentication (HTTP Settings -> Enable HTTP authentication): To get back to the internal authentication, we open MySQL, and run the following command: update zabbix.config set authentication_type='0' where configid='1?;","title":"LDAP/LDAPS"},{"location":"Zabbix/SSO/#dc","text":"Create A record in dns and user in AD users, then: ktpass -princ HTTP/zabbix.domain.local@DOMAIN.LOCAL -mapuser zabbix@DOMAIN.LOCAL -crypto all -pass VeryStrongPASS!!! -ptype KRB5_NT_PRINCIPAL -out my.keytab","title":"DC"},{"location":"Zabbix/SSO/#kerberos","text":"For Centos: yum install krb5-workstation krb5-libs krb5-auth-dialog mod_auth_kerb ntp ntpdate -y ntpdate DC1.domain.local vi /etc/krb5.conf Change next in /etc/krb5.conf: [realms] EXAMPLE.COM = { kdc = kerberos.example.com admin_server = kerberos.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Restart Apache to take effect specify the FQDN name of the server in /etc/hostname that must match the DNS record in the domain. cat /etc/hosts 127.0.0.1 zabbix.domain.local zabbix 'server ip' zabbix.domain.local zabbix After copy keytab file from DC, we need check permission for this. Command klist will show if the ticket was created. Create a Kerberos ticket for user OR easy to check if your krb5.conf is valid by doing kinit username@DOMAIN.COM , for our example kinit zabbix . Make sure the Kerberos authentication works on Linux: kinit -kV -p HTTP/zabbix.domain.local . Delete tickets - kdestroy -A .","title":"Kerberos"},{"location":"Zabbix/SSO/#web","text":"Enable HTTP authentication in zabbix, and im not think that change default login form is good for all. So i want work with link /zabbix/index_http.php . For apache add next block in /etc/httpd/conf.d/zabbix.conf: <Location /zabbix/index_http.php> AuthType Kerberos AuthName \"Kerberos Authenticated\" KrbAuthRealms DOMAIN.LOCAL Krb5Keytab \"/etc/httpd/conf.d/zabbix.keytab\" KrbMethodNegotiate On KrbSaveCredentials On KrbVerifyKDC On KrbServiceName Any KrbLocalUserMapping On KrbMethodK5Passwd Off Require valid-user # LogLevel trace8 </Location>","title":"web"},{"location":"Zabbix/SSO/#browser","text":"For Internet Explorer to use Kerberos authentication on Zabbix, we will have to add its URL to Local Intranet sites. Google Chrome uses Internet Explorer settings, so we do not need to configure it separately. i. Open Options -> Security in the IE. ii. Click Sites in the Local intranet, check the options shown in the screenshot below, and click Advanced: iii. Later, enter the Zabbix server URL. iv. Then, go to the Advanced tab and check Enable Integrated Windows Authentication. v. Also, we can also put Zabbix URL to the Local Intranet zone using the Group Policies (Computer Configuration -> Administrative Templates -> Windows Components -> Internet Explorer -> Internet Control Panel -> Security Page -> Site to Zone Assignment List. Use zone code 1 for intranet sites). vi. Add the URL of the Zabbix server to the following parameters of about:config for Mozilla Firefox: network.automatic-ntlm-auth.trusted-uris network.negotiate-auth.delegation-uris network.negotiate-auth.trusted-uris","title":"Browser"},{"location":"Zabbix/SSO/#debug","text":"","title":"debug"},{"location":"Zabbix/SSO/#kerberos-authentication-debugging-troubleshooting-in-apache","text":"If we have any issues, enable debug mode in apache: Enter the following before the closing tag in /etc/apache2/sites-available/000-defaults.conf: LogLevel trace8 Then we restart apache and check the Kerberos module error in the error.log file. To make it more convenient, we use the command to filter the entries by the IP address: tailf /var/log/httpd/error_log | grep 'our ip' tail -f /var/log/apache2/error.log | grep 'Our IP address' Similarly, to work with and diagnose Kerberos, we can use kinit and klist commands. kinit is a tool to get and cache Kerberos tickets, for example: kinit -V -k -t /etc/apache2/zabbix.keytab -p HTTP/zabbix.domain.local@DOMAIN.LOCAL If we have generated our keytab file correctly, the command will run. As a result, we will get a message that the authentication has been successful. Using klist, we can view cached Kerberos tickets: klist -a Make sure that the SPN record for your Zabbix service account exists in AD. Enter the following command on the domain controller: setpn -l zabbix_admin It must be in HTTP/zabbix.domain.local format. If there is no entry, add it. setspn -a HTTP/zabbix.domain.local zabbix_admin If KrbServiceName does not match the name specified in the keyboard file, an error occurs. So you can set the desired value during the test. Once you have made sure that the system is working, enter a valid service name. You can check with: klist - the /etc/apache2/zabbix.keytab","title":"Kerberos Authentication Debugging &amp; Troubleshooting in Apache"},{"location":"Zabbix/SSO/#notes","text":"A successful request should look like: Acquiring creds for HTTP/web01@DOMAIN.NET Verifying client data using KRB5 GSS-API Client didn't delegate us their credential GSS-API token of length XXX bytes will be sent back gss_accept_sec_context() failed: An unsupported mechanism was requested (, Unknown error) This usually means there's something wrong with the principal configuration. GSS-API major_status:000d0000, minor_status:025ea101 Could no find principal. Spelling error or wrong syntax ? GSS-API major_status:000d0000, minor_status:0000000d File permission errors (usually the keytab file). GSS-API major_status:000d0000, minor_status:000186a3 Wrong password in keytab or your ticket. kinit: Preauthentication failed while getting initial credentials Wrong password and/or credentials in general (check letter casing) kinit: KDC has no support for encryption type while getting initial credentials Encryption type is not supported by the AD server. Make sure not to use DES. Users not getting synced Make sure the users are as low in the hierarchy as possible or else they might not get caught. General authentication errors Make sure you're typing the login in correct case. They also have to match in the keytab file.","title":"Notes"},{"location":"Zabbix/SSO/#some-links","text":"https://plugins.miniorange.com/guide-to-setup-kerberos-single-sign-sso https://www.drupal.org/project/ldap/issues/2123615 https://www.zabbix.com/documentation/current/manual/appendix/items/kerberos https://gist.github.com/andersevenrud/53920c3ef91c5e11c939fce5ca17af3b https://www.drupal.org/project/ldap/issues/2123615 https://jakondo.ru/integratsiya-zabbix-s-active-directory-nastrojka-prozrachnoj-autentifikatsii-sso-single-sign-on/ https://jakondo.ru/nastrojka-sso-single-sign-on-avtorizatsii-na-apache-v-active-directory-debian-8-jessie-ubuntu-server-14-04/ http://woshub.com/zabbix-single-sign-sso-authentication-ldap-active-directory/","title":"Some links"},{"location":"Zabbix/mysql_monitoring/","text":"Monitoring mysql/mariadb [Standard template] uses keys like mysql.ping [\"{$ MYSQL.HOST}\", \"{$ MYSQL.PORT}\"]. This may be useful if zabbix-agent is not on the same host with the base, or if the port differs from the standard one on the base. In the usual case, it seems to me an unnecessary complication. A small addition to the installation from the link above: After creating a user in mysql and distributing rights to it, remember to write flush privileges; . The file for connecting to mysql must be available zabbix, do chmod 440 / var / lib / zabbix / .my.cnf . If you do chmod 777 with all your heart, then it will refuse to take data from there. It can be thrown anywhere, in the same / etc / zabbix for example, since anyway, you will have to specify the path to it in the UserParameter. It is also worth making zabbix the owner of these folders: sh chown -R zabbix: zabbix / etc / zabbix && chown -R zabbix: zabbix / var / lib / zabbix , If not the standard mariadb is installed on Centos, but for example rh-mariadb102-mariadb , then the mysql and mysqladmin utilities will not be in / usr / bin / but / opt / rh / rh-mariadb102 / root / usr / bin . Therefore, when using UserParameter in the agent config, besides HOME, you also need to add PATH or write the full path to the utility: UserParameter = mysql.ping, HOME = / var / lib / zabbix PATH =\" $ PATH: / opt / rh / rh-mariadb102 / root / usr / bin \"mysqladmin ping . Alternatively, you can install the same package with the usual mariadb =) It was not possible to add the path through /etc/profile.d/ or / etc / environment. You can also try to make zabbix a regular user and add PATH = $ {PATH}: / opt / rh / rh-mariadb102 / root / usr / bin to .bashrc An attempt to fix the systemd unit and start the agent from another user gave nothing ... 1 On a crutch, you can see $ PATH or printenv from zabbix by adding Server 127.0.0.1 to the agent config: yum install -y zabbix-get echo \"UserParameter=test1, echo \\$PATH\" >> /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf zabbix_get -s 127.0.0.1 -p 10050 -k test1","title":"Monitoring mysql/mariadb"},{"location":"Zabbix/mysql_monitoring/#monitoring-mysqlmariadb","text":"[Standard template] uses keys like mysql.ping [\"{$ MYSQL.HOST}\", \"{$ MYSQL.PORT}\"]. This may be useful if zabbix-agent is not on the same host with the base, or if the port differs from the standard one on the base. In the usual case, it seems to me an unnecessary complication. A small addition to the installation from the link above: After creating a user in mysql and distributing rights to it, remember to write flush privileges; . The file for connecting to mysql must be available zabbix, do chmod 440 / var / lib / zabbix / .my.cnf . If you do chmod 777 with all your heart, then it will refuse to take data from there. It can be thrown anywhere, in the same / etc / zabbix for example, since anyway, you will have to specify the path to it in the UserParameter. It is also worth making zabbix the owner of these folders: sh chown -R zabbix: zabbix / etc / zabbix && chown -R zabbix: zabbix / var / lib / zabbix , If not the standard mariadb is installed on Centos, but for example rh-mariadb102-mariadb , then the mysql and mysqladmin utilities will not be in / usr / bin / but / opt / rh / rh-mariadb102 / root / usr / bin . Therefore, when using UserParameter in the agent config, besides HOME, you also need to add PATH or write the full path to the utility: UserParameter = mysql.ping, HOME = / var / lib / zabbix PATH =\" $ PATH: / opt / rh / rh-mariadb102 / root / usr / bin \"mysqladmin ping . Alternatively, you can install the same package with the usual mariadb =) It was not possible to add the path through /etc/profile.d/ or / etc / environment. You can also try to make zabbix a regular user and add PATH = $ {PATH}: / opt / rh / rh-mariadb102 / root / usr / bin to .bashrc An attempt to fix the systemd unit and start the agent from another user gave nothing ... 1 On a crutch, you can see $ PATH or printenv from zabbix by adding Server 127.0.0.1 to the agent config: yum install -y zabbix-get echo \"UserParameter=test1, echo \\$PATH\" >> /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf zabbix_get -s 127.0.0.1 -p 10050 -k test1","title":"Monitoring mysql/mariadb"},{"location":"Zabbix/zabbix-agent/","text":"install zabbix-agent Go in repo for actual version of rpm (example Centos 7) : rpm -ivh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm yum -y install zabbix-agent chkconfig zabbix-agent on You can use jinja template for config of zabbix-agent /etc/zabbix/zabbix_agentd.conf . Default settings on agent (other options generally useless): PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=0 Server={{ Proxy[hostname] }} ServerActive={{ Proxy[hostname] }} Hostname={{ Host[hostname] }} # !!!Must be like name of host in web Include=/etc/zabbix/zabbix_agentd.d/*.conf Give access and starting: iptables -I INPUT -p tcp --dport 10050 -j ACCEPT iptables-save > /dev/null 2>&1 service zabbix-agent start If we use selinux, need allow zabbix-agent, or check that selinux disabled. For firewalld: firewall-cmd --permanent --add-port=10050/tcp firewall-cmd --reload You may need to create directories manually: mkdir /var/run/zabbix && chown -R zabbix:zabbix /var/run/zabbix mkdir /var/log/zabbix && chown -R zabbix:zabbix /var/log/zabbix playbook Example of ansible role for centos 7: - name: Install, configure, and start zabbix-agent block: - name: add rpm yum: name=https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm - name: install zabbix-agent yum: name: zabbix-agent state: present - name: copy userparams copy: src: 'templates/userparams.conf' dest: '/etc/zabbix/zabbix_agentd.d/userparams.conf' owner: zabbix group: zabbix - name: make config template: src: 'templates/zabbix_agentd.j2' dest: '/etc/zabbix/zabbix_agentd.conf' - name: add line in iptables command: iptables -I INPUT 5 -p tcp --dport 10050 -j ACCEPT - name: iptables save shell: iptables-save > /etc/sysconfig/iptables - name: enable zabbix-agent command: chkconfig zabbix-agent on - name: start zabbix-agent service: name: zabbix-agent state: started when: - ansible_facts['distribution'] == 'CentOS' - ansible_facts['distribution_major_version'] == \"7\" become: true ignore_errors: yes win If you downloaded archive , unzip the files and put them where they should be (i put the files in c:\\zabbix for example). Change settings Server/ServerActive/Hostname in zabbix_agentd.conf. Run cmd from admin: zabbix_agentd.exe -c c:\\zabbix\\conf\\zabbix_agentd.conf --install zabbix_agentd.exe --start Do not forget to add an exception to the firewall =)","title":"install [zabbix-agent]"},{"location":"Zabbix/zabbix-agent/#install-zabbix-agent","text":"Go in repo for actual version of rpm (example Centos 7) : rpm -ivh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm yum -y install zabbix-agent chkconfig zabbix-agent on You can use jinja template for config of zabbix-agent /etc/zabbix/zabbix_agentd.conf . Default settings on agent (other options generally useless): PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=0 Server={{ Proxy[hostname] }} ServerActive={{ Proxy[hostname] }} Hostname={{ Host[hostname] }} # !!!Must be like name of host in web Include=/etc/zabbix/zabbix_agentd.d/*.conf Give access and starting: iptables -I INPUT -p tcp --dport 10050 -j ACCEPT iptables-save > /dev/null 2>&1 service zabbix-agent start If we use selinux, need allow zabbix-agent, or check that selinux disabled. For firewalld: firewall-cmd --permanent --add-port=10050/tcp firewall-cmd --reload You may need to create directories manually: mkdir /var/run/zabbix && chown -R zabbix:zabbix /var/run/zabbix mkdir /var/log/zabbix && chown -R zabbix:zabbix /var/log/zabbix","title":"install zabbix-agent"},{"location":"Zabbix/zabbix-agent/#playbook","text":"Example of ansible role for centos 7: - name: Install, configure, and start zabbix-agent block: - name: add rpm yum: name=https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm - name: install zabbix-agent yum: name: zabbix-agent state: present - name: copy userparams copy: src: 'templates/userparams.conf' dest: '/etc/zabbix/zabbix_agentd.d/userparams.conf' owner: zabbix group: zabbix - name: make config template: src: 'templates/zabbix_agentd.j2' dest: '/etc/zabbix/zabbix_agentd.conf' - name: add line in iptables command: iptables -I INPUT 5 -p tcp --dport 10050 -j ACCEPT - name: iptables save shell: iptables-save > /etc/sysconfig/iptables - name: enable zabbix-agent command: chkconfig zabbix-agent on - name: start zabbix-agent service: name: zabbix-agent state: started when: - ansible_facts['distribution'] == 'CentOS' - ansible_facts['distribution_major_version'] == \"7\" become: true ignore_errors: yes","title":"playbook"},{"location":"Zabbix/zabbix-agent/#win","text":"If you downloaded archive , unzip the files and put them where they should be (i put the files in c:\\zabbix for example). Change settings Server/ServerActive/Hostname in zabbix_agentd.conf. Run cmd from admin: zabbix_agentd.exe -c c:\\zabbix\\conf\\zabbix_agentd.conf --install zabbix_agentd.exe --start Do not forget to add an exception to the firewall =)","title":"win"},{"location":"Zabbix/zabbix-proxy/","text":"Zabbix-proxy Install rpm --import http://repo.zabbix.com/RPM-GPG-KEY-ZABBIX rpm -ivh http://repo.zabbix.com/zabbix/4.2/rhel/7/x86_64/zabbix-release-4.2-1.el7.noarch.rpm yum install zabbix-proxy-mysql -y yum install mariadb-server -y systemctl enable mariadb && systemctl start mariadb Prepare database with little script - vi mysql_secure_installation.sql : UPDATE mysql.user SET Password=PASSWORD('password') WHERE User='root'; DELETE FROM mysql.user WHERE User=''; DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1'); DROP DATABASE IF EXISTS test; DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%'; create database zabbix character set utf8 collate utf8_bin; grant all privileges on zabbix.* to zabbix@localhost identified by 'password'; FLUSH PRIVILEGES; mysql -sfu root < mysql_secure_installation.sql mysql -u root -p zcat /usr/share/doc/zabbix-proxy-mysql-4.2.1/schema.sql.gz | mysql -u zabbixuser zabbix_proxy -p You can use jinja template for config of zabbix-agent /etc/zabbix/zabbix_proxy.conf . Default settings on agent (other options generally useless): PidFile=/var/run/zabbix/zabbix_proxy.pid LogFile=/var/log/zabbix/zabbix_proxy.log LogFileSize=0 Server={{ Proxy[hostname] }} ServerActive={{ Proxy[hostname] }} Hostname={{ Host[hostname] }} # !!!Must be like name of host in web SocketDir=/var/run/zabbix DBName=zabbix DBUser=zabbix DBPassword=zabbix If we use selinux, need allow zabbix-agent, or check that selinux disabled. Change rules of firewalld and start: firewall-cmd --permanent --add-port=10050/tcp firewall-cmd --permanent --add-port=10051/tcp firewall-cmd --reload systemctl enable zabbix-proxy & systemctl start zabbix-proxy Monitoring in zabbix Using default template Template App Zabbix Proxy . For collecting metrics from proxy, option Server/ServerActive must = in zabbix-agent config. Upgrade While upgrading Zabbix agents is not mandatory (but recommended), Zabbix server and proxies must be of the same major version. Therefore, in a server-proxy setup, Zabbix server and all proxies have to be stopped and upgraded. Keeping proxies running during server upgrade no longer will bring any benefit as during proxy upgrade their old data will be discarded and no new data will be gathered until proxy configuration is synced with server. service zabbix-proxy stop & service zabbix-agent stop rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm yum upgrade zabbix-proxy-mysql zabbix-agent -y systemctl start zabbix-proxy & systemctl start zabbix-agent SQLite Please note that if you have a proxy with a SQLite database, the history data of these proxies will be lost until the update. As updating the SQLite database file is not supported and this file must be deleted manually. When the proxy is started for the first time and the SQLite database file is missing, the proxy will create it automatically. Playbook for update on Centos 7 - name: STOP zabbix-proxy service: name: zabbix-proxy state: stopped - name: rpm-zabbix-5.0-1 yum: name=https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm - name: UPGRADE zabbix-proxy yum: name: zabbix-proxy state: latest - name: START zabbix-proxy service: name: zabbix-proxy state: started when: - ansible_facts['distribution'] == 'CentOS' - ansible_facts['distribution_major_version'] == \"7\" become: true ignore_errors: yes Parameters When changing the parameters in the /etc/zabbix/zabbix_proxy.conf config, you need to restart the proxy to apply the changes: service zabbix-proxy restart or /etc/init.d/zabbix-proxy restart . We check the proxy status via service zabbix-server status or if it is not clear journalctl -xe and in the log /var/log/zabbix/zabbix-proxy.log. To manually pull the configuration from the server without waiting for an automatic request: zabbix_proxy -R config_cache_reload In the proxy parameters, there are Pollers - these are processes that poll agents. A lot of them are needed in two cases: a large network and many unavailable resources are monitored. The increase in processes puts a lot of stress, thereby consuming precious resources. There is also an important timeout parameter that needs to be adjusted for current tasks. All checks that do not fit into it will be spent. If you do not monitor the use of pollers, then triggers of the form \"Zabbix unreachable poller processes more than 75% busy\" will probably appear, which indicate that their number is not enough. It can be the same with the cache, especially considering that there are several of them. https://www.zabbix.com/documentation/5.0/manual/concepts/proxy?s[]=proxy https://www.zabbix.com/documentation/5.0/manual/distributed_monitoring/proxies?s[]=proxy","title":"Zabbix-proxy"},{"location":"Zabbix/zabbix-proxy/#zabbix-proxy","text":"","title":"Zabbix-proxy"},{"location":"Zabbix/zabbix-proxy/#install","text":"rpm --import http://repo.zabbix.com/RPM-GPG-KEY-ZABBIX rpm -ivh http://repo.zabbix.com/zabbix/4.2/rhel/7/x86_64/zabbix-release-4.2-1.el7.noarch.rpm yum install zabbix-proxy-mysql -y yum install mariadb-server -y systemctl enable mariadb && systemctl start mariadb Prepare database with little script - vi mysql_secure_installation.sql : UPDATE mysql.user SET Password=PASSWORD('password') WHERE User='root'; DELETE FROM mysql.user WHERE User=''; DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1'); DROP DATABASE IF EXISTS test; DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%'; create database zabbix character set utf8 collate utf8_bin; grant all privileges on zabbix.* to zabbix@localhost identified by 'password'; FLUSH PRIVILEGES; mysql -sfu root < mysql_secure_installation.sql mysql -u root -p zcat /usr/share/doc/zabbix-proxy-mysql-4.2.1/schema.sql.gz | mysql -u zabbixuser zabbix_proxy -p You can use jinja template for config of zabbix-agent /etc/zabbix/zabbix_proxy.conf . Default settings on agent (other options generally useless): PidFile=/var/run/zabbix/zabbix_proxy.pid LogFile=/var/log/zabbix/zabbix_proxy.log LogFileSize=0 Server={{ Proxy[hostname] }} ServerActive={{ Proxy[hostname] }} Hostname={{ Host[hostname] }} # !!!Must be like name of host in web SocketDir=/var/run/zabbix DBName=zabbix DBUser=zabbix DBPassword=zabbix If we use selinux, need allow zabbix-agent, or check that selinux disabled. Change rules of firewalld and start: firewall-cmd --permanent --add-port=10050/tcp firewall-cmd --permanent --add-port=10051/tcp firewall-cmd --reload systemctl enable zabbix-proxy & systemctl start zabbix-proxy","title":"Install"},{"location":"Zabbix/zabbix-proxy/#monitoring-in-zabbix","text":"Using default template Template App Zabbix Proxy . For collecting metrics from proxy, option Server/ServerActive must = in zabbix-agent config.","title":"Monitoring in zabbix"},{"location":"Zabbix/zabbix-proxy/#upgrade","text":"While upgrading Zabbix agents is not mandatory (but recommended), Zabbix server and proxies must be of the same major version. Therefore, in a server-proxy setup, Zabbix server and all proxies have to be stopped and upgraded. Keeping proxies running during server upgrade no longer will bring any benefit as during proxy upgrade their old data will be discarded and no new data will be gathered until proxy configuration is synced with server. service zabbix-proxy stop & service zabbix-agent stop rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm yum upgrade zabbix-proxy-mysql zabbix-agent -y systemctl start zabbix-proxy & systemctl start zabbix-agent","title":"Upgrade"},{"location":"Zabbix/zabbix-proxy/#sqlite","text":"Please note that if you have a proxy with a SQLite database, the history data of these proxies will be lost until the update. As updating the SQLite database file is not supported and this file must be deleted manually. When the proxy is started for the first time and the SQLite database file is missing, the proxy will create it automatically.","title":"SQLite"},{"location":"Zabbix/zabbix-proxy/#playbook-for-update-on-centos-7","text":"- name: STOP zabbix-proxy service: name: zabbix-proxy state: stopped - name: rpm-zabbix-5.0-1 yum: name=https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm - name: UPGRADE zabbix-proxy yum: name: zabbix-proxy state: latest - name: START zabbix-proxy service: name: zabbix-proxy state: started when: - ansible_facts['distribution'] == 'CentOS' - ansible_facts['distribution_major_version'] == \"7\" become: true ignore_errors: yes","title":"Playbook for update on Centos 7"},{"location":"Zabbix/zabbix-proxy/#parameters","text":"When changing the parameters in the /etc/zabbix/zabbix_proxy.conf config, you need to restart the proxy to apply the changes: service zabbix-proxy restart or /etc/init.d/zabbix-proxy restart . We check the proxy status via service zabbix-server status or if it is not clear journalctl -xe and in the log /var/log/zabbix/zabbix-proxy.log. To manually pull the configuration from the server without waiting for an automatic request: zabbix_proxy -R config_cache_reload In the proxy parameters, there are Pollers - these are processes that poll agents. A lot of them are needed in two cases: a large network and many unavailable resources are monitored. The increase in processes puts a lot of stress, thereby consuming precious resources. There is also an important timeout parameter that needs to be adjusted for current tasks. All checks that do not fit into it will be spent. If you do not monitor the use of pollers, then triggers of the form \"Zabbix unreachable poller processes more than 75% busy\" will probably appear, which indicate that their number is not enough. It can be the same with the cache, especially considering that there are several of them. https://www.zabbix.com/documentation/5.0/manual/concepts/proxy?s[]=proxy https://www.zabbix.com/documentation/5.0/manual/distributed_monitoring/proxies?s[]=proxy","title":"Parameters"}]}